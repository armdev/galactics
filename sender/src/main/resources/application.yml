management:
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  security:
    enabled: false
  server:
    port: 3333
  tracing:
    sampling:
      probability: 1.0

  endpoint:
    shutdown:
      access: UNRESTRICTED
    loggers:
      access: UNRESTRICTED
    health:
      enabled: true
      show-details: ALWAYS
    probes:
      enabled: true
  endpoints:
    access:
      default: UNRESTRICTED
    jmx:
      exposure:
       include: '*'
    web:
     exposure:
      include: '*'
    cors:
      allowed-origins: 'true'
      enabled-by-default: 'false'
      
server:
    tomcat:        
      connection-timeout: 20m
      keep-alive-timeout: 20m    
      max-http-form-post-size: 50MB
      max-swallow-size: 50MB
      max-keep-alive-requests: 3000
    shutdown: GRACEFUL
    http2:
     enabled: true
    port: 4444
    servlet:
      session:
        timeout: 10m
    compression:
      enabled: true
      mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
      min-response-size: 1024
      
spring:

  thread:
    virtual:
      enabled: true
      
  kafka:    
    listener:
      ack-mode: MANUAL
    consumer:
      bootstrap-servers: ${KAFKA_BROKERS}
      auto-offset-reset: earliest         
      enable-auto-commit: false
      session.timeout.ms: 30000
      group-id: sender
      client-id: sender
      max-poll-records: 10
      fetch-max-wait: 100
      fetch-min-size: 504857600      
    producer:
      batch-size: 1048570000
      bootstrap-servers: ${KAFKA_BROKERS}
      buffer-memory: 97938193
      group-id: sender
      client-id: sender
      retries: 10

  main:
    allow-circular-references: false
    lazy-initialization: false
  application:
    name: sender
    
  profiles:
    active:
      ${ENV:LOCAL}     
     
  cloud:
    discovery:
       service-id: sender
       enabled: true    
  datasource:
    hikari:
     pool-name: sender
     maximum-pool-size: 50       # Reduce from 200 to a realistic number your DB can handle
     minimum-idle: 10
     connection-timeout: 3000    # Wait longer before giving up
     idle-timeout: 1000
     max-lifetime: 1000        # 5 minutes
    url: '${POSTGRES_URI}'  # JDBC URL for connecting to the database
    username: '${POSTGRES_USER}'                             # Database username
    password: '${POSTGRES_PASSWORD}'                         # Database password
    test-while-idle: true                # Test connections while they are idle
    validation-query: SELECT 1           # SQL query used to validate connections
    driver-class-name: org.postgresql.Driver  # Fully qualified name of the JDBC driver class

  jpa:
    show-sql: false                      # Whether to show SQL statements in the console
    database: POSTGRESQL                 # Database dialect to use (e.g., POSTGRESQL, H2, MYSQL)
    hibernate:
      ddl-auto: update                  # Hibernate DDL strategy (e.g., create, update, validate, none)
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy  # Naming strategy for Hibernate
      dialect: org.hibernate.dialect.PostgreSQL15Dialect         # Database dialect for Hibernate
      query:
        plan-cache-max-size: 16000        # Maximum size of the query plan cache
        plan-parameter-metadata-max-size: 16000  # Maximum size of the query plan parameter metadata cache
    properties:
      jakarta:
       persistence:
        sharedCache:
          mode: ALL
      hibernate:
        jdbc:
          batch_size: 100
        order_inserts: true
        order_updates: true
        temp:
          use-jdbc-metadata-defaults: false  # Whether to use JDBC metadata defaults for handling temporal types


  sql:
    init:
      platform: POSTGRESQL

  jackson:
    serialization:
      write_dates_as_timestamps: false

caffeine:
  default:
    expiration-time-millis: 90000
    allow-null-values: false
    maximum-cache-size: 900000
    
logging:    
#    structured:
#        format:
#          console: ecs
#          file: ecs
#        json:
#          add:
#            host: sender
#            version: 1.0         
#        ecs:
#         service:
#           name: sender
#           version: 1.0
#           environment: ${ENV}
#           node-name: primary

    
    pattern:
      level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
    level:
      root: INFO
      io.project: INFO 
